{"ast":null,"code":"var _jsxFileName = \"/Users/pc/Documents/JSprojects /Swiftassurances/client/src/components/Dashboard.components/Table/Table.js\";\nimport React, { useState } from 'react';\nimport MaterialTable from 'material-table';\n\nconst Table = props => {\n  const [selectedRow, setSelectedRow] = useState(null); //lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' }\n\n  const makeStyle = etat => {\n    if (etat === 'Dossier Traité') {\n      return 'rgb(145 254 159 / 47%)';\n    } else if (etat === 'À completer') {\n      return '#FFCD93';\n    } else if (etat === 'En verification') {\n      return '#59bfff';\n    } else if (etat === 'Refuseés') {\n      return '#ffadad8f';\n    } else {\n      return '#fff';\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MaterialTable, {\n    className: \"material-table-texts\",\n    style: {\n      maxWidth: '100%',\n      overflowY: 'auto',\n      overflowX: 'auto',\n      borderRadius: '10px',\n      width: '70vw'\n    },\n    columns: [{\n      title: 'Demarche',\n      field: 'demarche'\n    }, {\n      title: 'Nom',\n      field: 'nom'\n    }, {\n      title: 'Prenom',\n      field: 'prenom'\n    }, {\n      title: 'Adresse',\n      field: 'adresse'\n    }, {\n      title: 'Email',\n      field: 'email'\n    }, {\n      title: 'Telephone',\n      field: 'telephone'\n    }, {\n      title: 'Plaque d immatriculation',\n      field: 'matricule'\n    }, {\n      title: 'Categorie',\n      field: 'categorie'\n    }, {\n      title: 'Permis',\n      field: 'permis'\n    }, {\n      title: 'Carte Grise',\n      field: 'carte grise'\n    }, {\n      title: 'Carte Grise',\n      field: 'carte grise',\n      render: rowData => /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          color: '#fff',\n          fontWeight: '500',\n          background: makeStyle(rowData.etat),\n          padding: '5px',\n          borderRadius: '10%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 77\n        }\n      }, rowData.etat)\n    }],\n    data: props.data,\n    title: \"Vos Demande D'assurances\",\n    onRowClick: (evt, selectedRow) => setSelectedRow(selectedRow.tableData.id),\n    options: {\n      sorting: true,\n      filtering: true,\n      headerStyle: {\n        backgroundColor: '#200752',\n        color: '#fff'\n      },\n      rowStyle: rowData => ({\n        backgroundColor: selectedRow === rowData.tableData.id ? '#EEE' : '#FFF'\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default Table;\n/*import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableFooter from '@mui/material/TableFooter';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport \"./Table.css\";\n\n\n//icons\nimport IconButton from '@mui/material/IconButton';\nimport {AiOutlineVerticalRight} from 'react-icons/ai';\nimport {AiOutlineLeft} from 'react-icons/ai';\nimport {AiOutlineRight} from 'react-icons/ai';\nimport {AiOutlineVerticalLeft} from 'react-icons/ai';\n\nfunction TablePaginationActions(props) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineVerticalLeft /> : <AiOutlineVerticalRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineRight /> : <AiOutlineLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineLeft /> : <AiOutlineRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineVerticalRight /> : <AiOutlineVerticalLeft />}\n      </IconButton>\n    </Box>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\n//styling etat butons\nconst makeStyle=(status)=>{\n    if(status === 'Dossier traité')\n    {\n      return {\n        background: 'rgb(145 254 159 / 47%)',\n        color: 'green',\n      }\n    }\n    else if(status === 'Refusé')\n    {\n      return{\n        background: '#ffadad8f',\n        color: 'red',\n      }\n    }\n    else{\n      return{\n        background: '#59bfff',\n        color: 'white',\n      }\n    }\n  }\n\n//custom style stuff\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: '#200752',\n      color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n    },\n  }));\n  \n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0,\n    },\n  }));\n\nfunction createData(name, calories, fat, carbs, protein, etat) {\n    return { name, calories, fat, carbs, protein, etat };\n  }\n\nconst rows = [\n  createData('Cupcake', 305, 3.7, 4.6, 209, 'En verificatio'),\n  createData('Donut', 452, 25.0, 37, 4.3, 'Dossier traité' ),\n  createData('Eclair', 262, 16.0, 24, 6.0, 'Refusé'),\n  createData('Frozen yoghurt', 159, 6.0, 67, 4.3, 'A completer'),\n  createData('Gingerbread', 356, 16.0, 49, 3.9, 'Dossier traité'),\n  createData('Honeycomb', 408, 3.2, 67, 4.3, 'A completer'),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 'Dossier traité'),\n  createData('Jelly Bean', 375, 0.0, 24, 6.0, 'Refusé'),\n  createData('KitKat', 518, 26.0, 49, 3.9, 'Dossier traité'),\n  createData('Lollipop', 392, 0.2, 24, 6.0, 'Refusé'),\n  createData('Marshmallow', 318, 0, 4.6, 209, 'En verificatio'),\n  createData('Nougat', 360, 19.0, 67, 4.3, 'A completer'),\n  createData('Oreo', 437, 18.0, 24, 6.0, 'Refusé'),\n].sort((a, b) => (a.calories < b.calories ? -1 : 1));\n\nexport default function CustomPaginationActionsTable() {\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n        <TableContainer component={Paper} style={{ boxShadow: \"0px 13px 20px 0px #80808029\", borderRadius:'20px' }}>\n        <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n            <TableHead>\n                <TableRow>\n                <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n                <StyledTableCell align=\"right\">Calories</StyledTableCell>\n                <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n                <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n                <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n                <StyledTableCell align=\"right\">Statut</StyledTableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n            {(rowsPerPage > 0\n                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : rows\n            ).map((row) => (\n                <StyledTableRow key={row.name}>\n                    <StyledTableCell component=\"th\" scope=\"row\">{row.name}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.protein}</StyledTableCell>\n                    <StyledTableCell align=\"right\">\n                    <span className=\"status\" style={makeStyle(row.etat)}>{row.etat}</span>\n                    </StyledTableCell>\n                </StyledTableRow>\n            ))}\n\n            {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={6} />\n                </TableRow>\n            )}\n            </TableBody>\n            <TableFooter>\n            <TableRow>\n                <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={6}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                    inputProps: {\n                    'aria-label': 'rows per page',\n                    },\n                    native: true,\n                }}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n                />\n            </TableRow>\n            </TableFooter>\n        </Table>\n        </TableContainer>\n    </>\n  );\n}*/","map":{"version":3,"sources":["/Users/pc/Documents/JSprojects /Swiftassurances/client/src/components/Dashboard.components/Table/Table.js"],"names":["React","useState","MaterialTable","Table","props","selectedRow","setSelectedRow","makeStyle","etat","maxWidth","overflowY","overflowX","borderRadius","width","title","field","render","rowData","color","fontWeight","background","padding","data","evt","tableData","id","sorting","filtering","headerStyle","backgroundColor","rowStyle"],"mappings":"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":["import React, {useState} from 'react'\nimport MaterialTable from 'material-table'\n\n\n\n\nconst Table = (props) => {\n    const [selectedRow, setSelectedRow] = useState(null);\n//lookup: { 34: 'İstanbul', 63: 'Şanlıurfa' }\n\n\nconst makeStyle=(etat)=>{\n  if(etat === 'Dossier Traité')\n  {\n    return 'rgb(145 254 159 / 47%)'\n  }\n  else if(etat === 'À completer')\n  {\n    return '#FFCD93'\n  }\n  else if(etat === 'En verification')\n  {\n    return '#59bfff'\n  }\n  else if(etat === 'Refuseés')\n  {\n    return '#ffadad8f'\n  }\n  else{\n    return '#fff'\n  }\n}\n\n  return (\n    <>\n        <MaterialTable\n            className = 'material-table-texts'\n            style={{maxWidth: '100%', overflowY: 'auto', overflowX:'auto', borderRadius:'10px', width:'70vw'}}   \n            columns={[\n            { title: 'Demarche', field: 'demarche' },\n            { title: 'Nom', field: 'nom' },\n            { title: 'Prenom', field: 'prenom' },\n            { title: 'Adresse', field: 'adresse'},\n            { title: 'Email', field: 'email'},\n            { title: 'Telephone', field: 'telephone'},\n            { title: 'Plaque d immatriculation', field: 'matricule'},\n            { title: 'Categorie', field: 'categorie'},\n            { title: 'Permis', field: 'permis'},\n            { title: 'Carte Grise', field: 'carte grise'},\n            {title: 'Carte Grise', field: 'carte grise', render: rowData => <p style={{color: '#fff' , fontWeight:'500', background : makeStyle(rowData.etat) ,padding:'5px', borderRadius: '10%'}}>{rowData.etat}</p>}\n            ]}\n            data={props.data}\n            title=\"Vos Demande D'assurances\"\n            onRowClick={((evt, selectedRow) => setSelectedRow(selectedRow.tableData.id))}\n            options={{\n            sorting:true,\n            filtering: true,\n            headerStyle: {\n                backgroundColor: '#200752',\n                color: '#fff',\n                \n            },\n            rowStyle: rowData => ({\n                backgroundColor: (selectedRow === rowData.tableData.id) ? '#EEE' : '#FFF'\n            })\n\n            }}\n        />\n\n    </>\n  )\n}\n\nexport default Table\n\n\n\n\n\n\n\n\n/*import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { styled } from '@mui/material/styles';\nimport { useTheme } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableCell, { tableCellClasses } from '@mui/material/TableCell';\nimport TableBody from '@mui/material/TableBody';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableFooter from '@mui/material/TableFooter';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport \"./Table.css\";\n\n\n//icons\nimport IconButton from '@mui/material/IconButton';\nimport {AiOutlineVerticalRight} from 'react-icons/ai';\nimport {AiOutlineLeft} from 'react-icons/ai';\nimport {AiOutlineRight} from 'react-icons/ai';\nimport {AiOutlineVerticalLeft} from 'react-icons/ai';\n\nfunction TablePaginationActions(props) {\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onPageChange } = props;\n\n  const handleFirstPageButtonClick = (event) => {\n    onPageChange(event, 0);\n  };\n\n  const handleBackButtonClick = (event) => {\n    onPageChange(event, page - 1);\n  };\n\n  const handleNextButtonClick = (event) => {\n    onPageChange(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (event) => {\n    onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineVerticalLeft /> : <AiOutlineVerticalRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineRight /> : <AiOutlineLeft />}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineLeft /> : <AiOutlineRight />}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === 'rtl' ? <AiOutlineVerticalRight /> : <AiOutlineVerticalLeft />}\n      </IconButton>\n    </Box>\n  );\n}\n\nTablePaginationActions.propTypes = {\n  count: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  page: PropTypes.number.isRequired,\n  rowsPerPage: PropTypes.number.isRequired,\n};\n\n\n//styling etat butons\nconst makeStyle=(status)=>{\n    if(status === 'Dossier traité')\n    {\n      return {\n        background: 'rgb(145 254 159 / 47%)',\n        color: 'green',\n      }\n    }\n    else if(status === 'Refusé')\n    {\n      return{\n        background: '#ffadad8f',\n        color: 'red',\n      }\n    }\n    else{\n      return{\n        background: '#59bfff',\n        color: 'white',\n      }\n    }\n  }\n\n//custom style stuff\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: '#200752',\n      color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n    },\n  }));\n  \n  const StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0,\n    },\n  }));\n\nfunction createData(name, calories, fat, carbs, protein, etat) {\n    return { name, calories, fat, carbs, protein, etat };\n  }\n\nconst rows = [\n  createData('Cupcake', 305, 3.7, 4.6, 209, 'En verificatio'),\n  createData('Donut', 452, 25.0, 37, 4.3, 'Dossier traité' ),\n  createData('Eclair', 262, 16.0, 24, 6.0, 'Refusé'),\n  createData('Frozen yoghurt', 159, 6.0, 67, 4.3, 'A completer'),\n  createData('Gingerbread', 356, 16.0, 49, 3.9, 'Dossier traité'),\n  createData('Honeycomb', 408, 3.2, 67, 4.3, 'A completer'),\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 'Dossier traité'),\n  createData('Jelly Bean', 375, 0.0, 24, 6.0, 'Refusé'),\n  createData('KitKat', 518, 26.0, 49, 3.9, 'Dossier traité'),\n  createData('Lollipop', 392, 0.2, 24, 6.0, 'Refusé'),\n  createData('Marshmallow', 318, 0, 4.6, 209, 'En verificatio'),\n  createData('Nougat', 360, 19.0, 67, 4.3, 'A completer'),\n  createData('Oreo', 437, 18.0, 24, 6.0, 'Refusé'),\n].sort((a, b) => (a.calories < b.calories ? -1 : 1));\n\nexport default function CustomPaginationActionsTable() {\n  \n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <>\n        <TableContainer component={Paper} style={{ boxShadow: \"0px 13px 20px 0px #80808029\", borderRadius:'20px' }}>\n        <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\n            <TableHead>\n                <TableRow>\n                <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n                <StyledTableCell align=\"right\">Calories</StyledTableCell>\n                <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n                <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n                <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n                <StyledTableCell align=\"right\">Statut</StyledTableCell>\n                </TableRow>\n            </TableHead>\n            <TableBody>\n            {(rowsPerPage > 0\n                ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : rows\n            ).map((row) => (\n                <StyledTableRow key={row.name}>\n                    <StyledTableCell component=\"th\" scope=\"row\">{row.name}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.calories}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.fat}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.carbs}</StyledTableCell>\n                    <StyledTableCell align=\"right\">{row.protein}</StyledTableCell>\n                    <StyledTableCell align=\"right\">\n                    <span className=\"status\" style={makeStyle(row.etat)}>{row.etat}</span>\n                    </StyledTableCell>\n                </StyledTableRow>\n            ))}\n\n            {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={6} />\n                </TableRow>\n            )}\n            </TableBody>\n            <TableFooter>\n            <TableRow>\n                <TablePagination\n                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\n                colSpan={6}\n                count={rows.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                SelectProps={{\n                    inputProps: {\n                    'aria-label': 'rows per page',\n                    },\n                    native: true,\n                }}\n                onPageChange={handleChangePage}\n                onRowsPerPageChange={handleChangeRowsPerPage}\n                ActionsComponent={TablePaginationActions}\n                />\n            </TableRow>\n            </TableFooter>\n        </Table>\n        </TableContainer>\n    </>\n  );\n}*/\n"]},"metadata":{},"sourceType":"module"}